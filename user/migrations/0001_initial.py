# Generated by Django 3.1.7 on 2021-03-07 08:35

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('gender', models.CharField(choices=[('F', 'Femme'), ('M', 'Male')], default='M', max_length=1, verbose_name='gender')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='date of birth')),
                ('phone_number', models.CharField(blank=True, max_length=13, verbose_name='phone number')),
                ('address_part1', models.CharField(blank=True, max_length=200, verbose_name='address')),
                ('address_part2', models.CharField(blank=True, max_length=200, null=True, verbose_name='complete address')),
                ('postal_code', models.IntegerField(blank=True, null=True, validators=[django.core.validators.RegexValidator(message="Please use this format: 'XXXXX'.", regex='^\\d{5}$')])),
                ('city', models.CharField(blank=True, max_length=30, verbose_name='city')),
                ('country', models.CharField(blank=True, max_length=30, verbose_name='country')),
                ('email', models.EmailField(max_length=50)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'unique_together': {('email',)},
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='doctor', serialize=False, to='user.user', verbose_name='User')),
                ('qualification', models.CharField(max_length=100, verbose_name='qualification')),
                ('registration_number', models.IntegerField(unique=True, verbose_name='registration number')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='last modification date')),
            ],
            options={
                'verbose_name': 'doctor',
                'verbose_name_plural': 'doctors',
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='Patient', serialize=False, to='user.user', verbose_name='User')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='last modification date')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='date added to the system')),
                ('date_of_consultant', models.DateField(blank=True, null=True, verbose_name='date when consult with doctor')),
            ],
        ),
    ]
